[{"title":"如何在集群上搭建OpenMpi","url":"/2020/08/10/Mpi_Build/","content":"## 注意点\n+ 由于我安装OpenMpi之前已经实现了集群节点间SSH无密码登录，且也挂载了共享文件夹。假如你没有这些环境的话，你需要事先准备，网上有相关教程。\n\n## 在官网下载OpenMpi[下载](https://www.open-mpi.org/)\n![](https://github.com/DaviCZW/DaviCZW.github.io/blob/master/img/MPI_Downloads.PNG)\n```\nLinux上可以用如wget + 安装包地址的放置下载OpenMpi的安装包\n```\n## Linux上安装OpenMpi\n+ 首先是解压OpenMpi的安装包，接下来这三步就比较重要。在解压后的文件夹下运行：\n```\n(sudo) ./configure --prefix=路径（我的选择是/usr/local/openmpi） （在这一步可以使用--diable-mpi-***的方式取消配置时候对一些编译器的绑定）\n(sudo) make（在这一步可能会报错，如cannot find -***，意思是缺少lib***.so的库，可以从网上下载或从其他节点复制）\n(sudo) make install（卸载的话就是make uninstall）\n```\n  其中第一步中的路径可以自己选定，不过有一次安装过程我报了一个库文件缺失的问题，是通过重新安装并选定如上的路径解决的。\n\n## Linux上运行OpenMpi\n+ 在安装结束后，我们还需要配置一下环境变量。\n亲测在/etc/profile或者是$HOME/.bashrc上配置，都能在本机上mpirun成功。\n但是假如你需要两台机子之间的通讯，那么最好还是在.bashrc文件的上面写下：\n```\nexport PATH=(./configure时选择得路径)/bin:$PATH\nexport LD_LIBRARY_PATH=(./configure时选择得路径)/lib:$PATH\n```\n  选择.bashrc文件配置环境变量的原因，好像是交互式非登录通信的时候，文件的启动顺序问题？\n假如是/etc/profile文件的话，会报出orte的错误。\n\n## 在集群上配置OpenMpi\n+ 之前看网上其他教程有人说过假如环境没问题，可以直接复制已经安装好的OpenMpi文件夹到其他节点上完成OpenMpi的安装，可是亲测单纯复制安装文件夹没用（就算你./configure的路径选择的也是安装文件夹）。而且就算mpirun测试成功，后面在运行用例的时候说不定会出现库文件缺失的问题。所以最好还是传安装包，然后再安装以上的安装路径重复一下。\n\n## Linux上使用Intel Mpi Benchmark（IMB）测试集群MPI的带宽和延迟\n+ 既然已经完成了OpenMpi的集群配置，那不妨使用IMB工具测试集群MPI通讯的带宽和延迟。首先我们需要从官网[下载](https://github.com/intel/mpi-benchmarks/releases)IMB。\n```\n解压后在解压文件夹内的src_c文件夹内使用make命令，接着我们就会看到IMB-MPI1文件\n```\n+ 记住，如OpenMpi一样，我们的IMB最好在集群的所有节点中都有着相同的路径。而这样用两个节点测试用例讲一下如何使用PingPong测试\n```\nmpirun -np 2 -host node1,node2 ***/IMB-MPI1 PingPong\n其中由于OpenMpi的特殊你可以用--mca + 一些命令来添加测试参数，比如--mca btl_openib_if_inculde(exclude) + 网卡名称，代表选定某个网卡或者排除某个网卡。\n而IMB官网也有一个英文的指导PDF文件，里面详细讲了更多的测试用法，和参数选择\n```","tags":["Linux"]},{"title":"如何基于GitHub搭建一个个人博客？","url":"/2019/02/27/boke/","content":"### 个人的balabala\n写这篇个人博客的任务本来应该在寒假就完成了，可是我的拖延症实在是太太太严重啦！懒癌晚期本人没错了~ 经过昨晚傻俊的提醒，痛定思痛，还是快点完成任务好哈哈哈。接下来就是正题了！\n\n## 正题正题！\n\n### 必要的软件安装过程~\n\n+ 安装Git(安装地址[点这里](https://git-scm.com/)）\n![](https://github.com/DaviCZW/DaviCZW.github.io/raw/master/img/Git_Home.png)\n\n+ 安装Node.js（安装地址同样[点这里](https://nodejs.org/en/)）\n\n这是搭建个人博客的必要的两个软件，当我们完成安装过程后就可以继续下一步啦\n\n### GitHub上必要的一些操作\n因为这个个人博客是基于GitHub来搭建的，那理所当然的我们需要有一个GitHub账号，如果没有的话就需要去[GitHub官网](https://github.com/)）进行注册\n\n当我们拥有了自己的GitHub账号后，我们就可以进行以下的各种操作啦\n+ 在GitHub的个人头像左边的加号上点击一下，并创建一个新仓库（New repository）\n![](https://github.com/DaviCZW/DaviCZW.github.io/raw/master/img/New_repository.png)\n\n+ 因为是个人网站，所以在仓库创建过程中需要遵守GitHub的网址命名规则，那就是（用户名+github.io）， 并且需要点击Public\n![](https://github.com/DaviCZW/DaviCZW.github.io/raw/master/img/Repository_Set.png)\n\n+ 当仓库创建完成后我们只需要在接下来跳转的页面点击——Change theme选择一个主题并在GitHub上托管我们的个人网站就可以啦，访问我们个人网站的方法是用如https://自己的用户名.github.io的网址去访问\n\n### 本地仓库的搭建与配置\n虽然我们经过以上的步骤拥有了一个自己的主题，但我想大家肯定不会满足于最开始选择的那个单调的主题，毕竟我们选择这么大费周章地创建一个个人博客就是为了个性化和自由度嘛。那么，主题的个性化肯定是一个不可以避过的话题。  \n\n+ 克隆仓库以便进行本地的配置\n还记得我们之前安装的Git吗？下载完它之后会有一个Git Bash的桌面应用，打开它，然后在本地创建一个属于个人博客的文件夹，比如我的是在D:/blog，进入该文件夹，再使用如下命令\n![](https://github.com/DaviCZW/DaviCZW.github.io/raw/master/img/Git_Bash.png)\n`$ git clone git@github.com:DaviCZW/DaviCZW.github.io.git`\n\n+ 安装hexo\n使用npm命令来安装hexo（该操作可以在个人博客文件夹下进行）\n```\n$ npm install -g hexo-cli\n$ hexo init\n$ npm install\n```\n以上步骤完成后我们就可以在当前文件夹下使用Hexo的命令行，常用的有\n```\nhexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹\nhexo server (hexo s) 启动本地web服务，用于博客的预览\nhexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）\n```\n相信此时进行到这一步的你应该会兴冲冲地直接hexo g、hexo s、hexo d三部曲然后发现咦，为什么hexo d会出现莫名其妙地错误提示。这是因为有关键性的一步还没做，那就是在个人博客文件夹下的_config.yml文件（该文件内包含了我们个人博客网站的基本配置信息）进行如下设置\n![](https://github.com/DaviCZW/DaviCZW.github.io/raw/master/img/GitHub_Web.png)\n\n### 主题的选择与使用\n+ 有些时候经过以上步骤后还是无法远程把本地仓库同步到GitHub上，这是因为SSH的配置问题，因为篇幅有限（...太长了不想写qwq吗）在这里就放我之前搭建时看的[链接](https://blog.csdn.net/t822876884/article/details/60568700)\n\n+ 选择自己心仪的主题\n终于来到了激动人心的一幕！让我们进入[商场](https://hexo.io/themes/)逛一逛吧\n![](https://github.com/DaviCZW/DaviCZW.github.io/raw/master/img/Hexo_Theme.png)\n在这个网站里我们可以选择自己心仪的主题，点击主题的图片会进入主题预览，而点击名字则会进入到该主题在GitHub项目。  \n我们先在Git Bash中进入到个人博客文件夹的中themes子目录，然后在该子目录下克隆主题的GitHub项目，接着只需要最后一步我们就可以运用该主题啦！那就是在个人博客文件夹的_config.yml文件（上文提过）里找到一个theme:的键对，在该键对的值里填写我们克隆下来的主题文件夹名称，比如我的是这样子的\n![](https://github.com/DaviCZW/DaviCZW.github.io/raw/master/img/theme.png)\n\n### 从本地部署到GitHub的个人网站项目上\n每当你修改主题或者你编写了新的博客的时候，你就可以通过\n+ hexo c（清除原本的数据）\n+ hexo g（生成静态文件）\n+ hexo s（部署到本地的Web服务，并通过http://localhost:4000/，来进行预览）\n+ hexo d（同步到GitHub的个人网站项目上）\n当你完成这几步后就可以通过上文提及的访问个人网站的网址来看我们新的小窝啦\n","tags":["个人博客"]}]